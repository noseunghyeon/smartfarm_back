name: SmartFarm Backend CICD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file
        run: |
          touch .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> .env
          echo "KMA_API_KEY=${{ secrets.KMA_API_KEY }}" >> .env
          echo "KAMIS_API_KEY=${{ secrets.KAMIS_API_KEY }}" >> .env
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> .env
          echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
          echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
          echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> .env
          echo "YOUNG_API_KEY=${{ secrets.YOUNG_API_KEY }}" >> .env
          echo "INFOMATION_API_KEY=${{ secrets.INFOMATION_API_KEY }}" >> .env
          echo "TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" >> .env

      - name: Debug - List files
        run: ls -la

      - name: Sign in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: roseunghyeon/smartfarm-back:latest
          cache-from: type=registry,ref=roseunghyeon/smartfarm-back:buildcache
          cache-to: type=registry,ref=roseunghyeon/smartfarm-back:buildcache,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Clean EC2 and setup Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Aggressive disk cleanup
            echo "Performing aggressive disk cleanup..."
            sudo apt-get clean
            sudo apt-get autoremove -y
            sudo journalctl --vacuum-time=1d
            sudo rm -rf /var/lib/docker/tmp/*
            sudo rm -rf /var/cache/apt/*
            sudo rm -rf /var/lib/apt/lists/*

            # Remove existing Docker completely
            echo "Removing existing Docker installation..."
            sudo systemctl stop docker || true
            sudo systemctl stop docker.socket || true
            sudo snap remove docker || true
            sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
            sudo apt-get purge -y docker-ce docker-ce-cli containerd.io docker-compose-plugin || true
            sudo rm -rf /var/lib/docker
            sudo rm -rf /var/lib/containerd
            sudo apt-get update

            # Install Docker using apt
            echo "Installing Docker using apt..."
            sudo apt-get install -y ca-certificates curl gnupg
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo \
              "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            # Start and enable Docker service
            echo "Starting Docker service..."
            sudo systemctl start docker
            sudo systemctl enable docker

            # Setup Docker permissions
            echo "Setting up Docker permissions..."
            sudo groupadd docker || true
            sudo usermod -aG docker ubuntu
            sudo systemctl restart docker

            # Check disk space
            echo "Checking disk space..."
            df -h

            # Create app directory if it doesn't exist
            if [ ! -d "/home/ubuntu/app" ]; then
              mkdir -p /home/ubuntu/app
            fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Final cleanup before deployment
            echo "Final cleanup before deployment..."
            sudo systemctl status docker
            sudo docker system prune -af
            sudo docker volume prune -f

            cd /home/ubuntu/app
            sudo docker-compose -f docker-compose.prod.yml down || true
            sudo docker pull roseunghyeon/smartfarm-back:latest
            sudo docker-compose -f docker-compose.prod.yml up -d
